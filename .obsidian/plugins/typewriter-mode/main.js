var re=Object.defineProperty;var Oe=Object.getOwnPropertyDescriptor;var He=Object.getOwnPropertyNames;var ke=Object.prototype.hasOwnProperty;var Ve=(e,t)=>{for(var i in t)re(e,i,{get:t[i],enumerable:!0})},We=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of He(t))!ke.call(e,n)&&n!==i&&re(e,n,{get:()=>t[n],enumerable:!(r=Oe(t,n))||r.enumerable});return e};var Ie=e=>We(re({},"__esModule",{value:!0}),e);var Ne={};Ve(Ne,{default:()=>ze});module.exports=Ie(Ne);var q={version:null,isAnnounceUpdatesEnabled:!0,isPluginActivated:!0,isDisableInCanvasEnabled:!1,isTypewriterScrollEnabled:!0,isOnlyActivateAfterFirstInteractionEnabled:!1,isOnlyMaintainTypewriterOffsetWhenReachedEnabled:!1,isTypewriterOnlyUseCommandsEnabled:!1,typewriterOffset:.5,isKeepLinesAboveAndBelowEnabled:!1,linesAboveAndBelow:5,isMaxCharsPerLineEnabled:!1,maxCharsPerLine:64,isDimUnfocusedParagraphsEnabled:!1,dimUnfocusedEditorsBehavior:"dim",dimmedParagraphsOpacity:.25,isPauseDimUnfocusedParagraphsWhileScrollingEnabled:!0,isPauseDimUnfocusedParagraphsWhileSelectingEnabled:!0,isHighlightCurrentLineEnabled:!0,isHighlightCurrentLineOnlyInFocusedEditorEnabled:!1,currentLineHighlightStyle:"box",currentLineHighlightUnderlineThickness:1,"currentLineHighlightColor-dark":"#444","currentLineHighlightColor-light":"#ddd",doesFullscreenWritingFocusShowHeader:!1,doesFullscreenWritingFocusShowVignette:!0,fullscreenWritingFocusVignetteStyle:"box"};var le=require("obsidian"),u=class extends le.PluginSettingTab{plugin;constructor(t,i){super(t,i),this.plugin=i}display(){this.containerEl.empty();for(let t of Object.values(this.plugin.features))t.registerSetting(this)}};var de=require("@codemirror/state"),a=de.Facet.define({combine:e=>e.length===0?q:e[e.length-1]});var pe=require("@codemirror/state"),f=class{constructor(t){this.view=t;this.onLoad(),this.domResizeObserver=new ResizeObserver(this.onResize.bind(this)),this.domResizeObserver.observe(this.view.dom.ownerDocument.body)}domResizeObserver=null;_isDisabled=null;isDisabled(){let{isPluginActivated:t}=this.view.state.facet(a);if(!t)return!0;if(this._isDisabled==null){let{isDisableInCanvasEnabled:i}=this.view.state.facet(a);this._isDisabled=i&&this.view.dom.ownerDocument.querySelector(".canvas-wrapper")!=null}return this._isDisabled}userEventAllowed(t){let{isTypewriterOnlyUseCommandsEnabled:i}=this.view.state.facet(a),r=/^(select|input|delete|undo|redo)(\..+)?$/,n=/^(select.pointer)$/;return i&&(r=/^(input|delete|undo|redo)(\..+)?$/,n=/^(select)(\..+)?$/),r.test(t)&&!n.test(t)}inspectTransactions(t){let i=[],r=!1;for(let l of t.transactions){l.reconfigured&&(r=!0);let d=l.annotation(pe.Transaction.userEvent);d!==void 0&&i.push(d)}return i.length===0?{isReconfigured:r,isUserEvent:!1,allowedUserEvents:null}:{isReconfigured:!1,isUserEvent:!0,allowedUserEvents:i.reduce((l,d)=>l&&this.userEventAllowed(d),i.length>0)}}update(t){let{isReconfigured:i,isUserEvent:r,allowedUserEvents:n}=this.inspectTransactions(t);if(i&&this.onReconfigured(),!this.isDisabled()){if(!r){this.updateNonUserEvent();return}n?this.updateAllowedUserEvent():this.updateDisallowedUserEvent()}}onLoad(){}onReconfigured(){}updateAllowedUserEvent(){}updateDisallowedUserEvent(){}updateNonUserEvent(){}onResize(){}destroy(){var t;(t=this.domResizeObserver)==null||t.disconnect()}};var ge=require("@codemirror/state"),_=ge.Facet.define({combine:e=>e.length===0?{cssVariables:{},bodyAttrs:{},bodyClasses:[]}:e[e.length-1]});function p(e){return e.dom.ownerDocument.querySelector(".workspace-leaf.mod-active .cm-editor, .mod-inside-iframe .cm-editor")}function w(e){return e.dom.ownerDocument.querySelector(".workspace-leaf.mod-active .cm-scroller, .mod-inside-iframe .cm-scroller")}function ce(e){return e.dom.ownerDocument.querySelector(".workspace-leaf.mod-active .cm-sizer, .mod-inside-iframe .cm-sizer")}function he(e,t){var i;return parseFloat((i=e.contentDOM.querySelector(".cm-active.cm-line"))==null?void 0:i.getCssPropertyValue(t).replace("px",""))}function me(e){var n;let t=((n=e.coordsAtPos(e.state.selection.main.head))==null?void 0:n.top)??0,i=p(e);if(!i)return 0;let r=i.getBoundingClientRect().top;return t-r}function Be(e,t){let i=p(e);if(!i)return 0;let r=he(e,"font-size"),n=e.state.facet(a).typewriterOffset,l=i.clientHeight*n,d=(t-r)/2;return l-d}function Re(e){let t=he(e,"line-height"),i=Be(e,t),r=me(e),{isTypewriterScrollEnabled:n,isKeepLinesAboveAndBelowEnabled:l,isOnlyMaintainTypewriterOffsetWhenReachedEnabled:d}=e.state.facet(a),ne=p(e),ie=w(e),m;if(!ne||!ie)m=0;else if(n)m=i,d&&(m=ie.scrollTop+r<i?Math.min(i,r):i);else if(l){let{linesAboveAndBelow:se}=e.state.facet(a),oe=e.defaultLineHeight*se,ae=ne.clientHeight-e.defaultLineHeight*(se+1),Fe=ie.scrollTop!==0&&r<oe,Ue=r>ae;Fe?m=oe:Ue?m=ae:m=r}else m=me(e);return{typewriterOffset:i,scrollOffset:m,activeLineOffset:r,lineHeight:t}}function j(e,t,i){e.requestMeasure({key:t,read:r=>Re(r),write:(r,n)=>{window.requestAnimationFrame(()=>{i(r,n)})}})}var G=require("@codemirror/view");var ue=G.ViewPlugin.fromClass(class extends f{isInitialInteraction=!0;isRenderingAllowedUserEvent=!1;onLoad(){super.onLoad(),window.addEventListener("moveByCommand",this.moveByCommand.bind(this)),this.onReconfigured()}onReconfigured(){if(console.log("onReconfigured"),this.isDisabled()){this.removeCurrentLineHighlight();return}super.onReconfigured(),this.loadPerWindowProps(),this.updateAfterExternalEvent()}loadPerWindowProps(){let e=Array.from(this.view.dom.ownerDocument.querySelectorAll("iframe")).map(r=>r.contentDocument.body),t=[this.view.dom.ownerDocument.body,...e],i=this.view.state.facet(_);for(let r of t)r.addClasses(i.bodyClasses),r.setCssProps(i.cssVariables),r.setAttrs(i.bodyAttrs)}removeCurrentLineHighlight(e=this.view){let t=p(e);if(!t)return;t.querySelector(".ptm-current-line-highlight").remove()}loadCurrentLineHighlight(e=this.view){let t=p(e);if(!t)return null;let i=t.querySelector(".ptm-current-line-highlight");if(!i){i=document.createElement("div");let r=e.state.facet(a);i.className=`ptm-current-line-highlight ptm-current-line-highlight-${r.currentLineHighlightStyle}`,t.appendChild(i)}return i}destroyCurrentLineHighlight(e=this.view){let t=p(e);if(!t)return;let i=t.querySelector(".ptm-current-line-highlight");i==null||i.remove()}setupWheelListener(){let e=w(this.view);e&&e.addEventListener("wheel",this.onWheel.bind(this))}updateAllowedUserEvent(){super.updateAllowedUserEvent();let e=p(this.view);e&&(e.classList.remove("ptm-wheel"),e.classList.remove("ptm-select"),this.isInitialInteraction&&(e.classList.remove("ptm-first-open"),this.isInitialInteraction=!1)),this.isRenderingAllowedUserEvent=!0,j(this.view,"TypewriterModeUpdateAfterUserEvent",(t,i)=>{this.recenterAndMoveCurrentLineHighlight(i,t),this.isRenderingAllowedUserEvent=!1})}updateDisallowedUserEvent(){if(this.isRenderingAllowedUserEvent)return;super.updateDisallowedUserEvent();let e=p(this.view);e&&(this.isInitialInteraction&&(e.classList.remove("ptm-first-open"),this.isInitialInteraction=!1),e.classList.add("ptm-select")),j(this.view,"TypewriterModeUpdateAfterUserEvent",({activeLineOffset:t,lineHeight:i},r)=>{let{isHighlightCurrentLineEnabled:n}=r.state.facet(a);n&&this.moveCurrentLineHighlight(r,t,i)})}updateNonUserEvent(){if(super.updateNonUserEvent(),!this.isInitialInteraction)return;let{isOnlyActivateAfterFirstInteractionEnabled:e}=this.view.state.facet(a);if(e){let t=p(this.view);t&&t.classList.add("ptm-first-open")}}moveByCommand(){let e=p(this.view);e&&e.classList.remove("ptm-select"),this.updateAllowedUserEvent()}onResize(){this.isDisabled()||(super.onResize(),this.updateAfterExternalEvent())}onWheel(){let e=p(this.view);e&&e.classList.add("ptm-wheel")}destroy(){super.destroy(),this.destroyCurrentLineHighlight();let e=w(this.view);e&&e.removeEventListener("wheel",this.onWheel),window.removeEventListener("moveByCommand",this.moveByCommand.bind(this))}updateAfterExternalEvent(){let{isTypewriterScrollEnabled:e}=this.view.state.facet(a);j(this.view,"TypewriterModeUpdateAfterExternalEvent",(t,i)=>{this.setupWheelListener(),e&&this.setPadding(i,t.typewriterOffset),this.recenterAndMoveCurrentLineHighlight(i,t)})}moveCurrentLineHighlight(e,t,i){let r=this.loadCurrentLineHighlight(e);r&&(r.style.height=`${i}px`,r.style.top=`${t}px`)}setPadding(e,t){let{isOnlyMaintainTypewriterOffsetWhenReachedEnabled:i}=e.state.facet(a),r=ce(e);r&&(r.style.padding=i?`0 0 ${t}px 0`:`${t}px 0`)}recenter(e,t){let i=e.state.selection.main.head,r=G.EditorView.scrollIntoView(i,{y:"start",yMargin:t}),n=e.state.update({effects:r});e.dispatch(n)}recenterAndMoveCurrentLineHighlight(e,{scrollOffset:t,lineHeight:i}){let{isTypewriterScrollEnabled:r,isKeepLinesAboveAndBelowEnabled:n,isHighlightCurrentLineEnabled:l}=e.state.facet(a);(r||n)&&this.recenter(e,t),l&&this.moveCurrentLineHighlight(e,t,i)}});var Ae=require("obsidian");var fe=require("obsidian"),J=require("obsidian");async function $e(e,t,i){let r=await fetch(`https://api.github.com/repos/${e}/${t}/releases`),n=await r.json();if(!r.ok&&"message"in n||!Array.isArray(n))throw new Error(`Failed to fetch releases: ${n.message??"Unknown error"}`);if(i==null)return n.filter(d=>!d.draft&&!d.prerelease);let l=n.findIndex(d=>d.tag_name===i);if(l===-1)throw new Error(`Could not find release with tag ${i}`);return n.slice(0,l).filter(d=>!d.draft&&!d.prerelease)}var Y=class extends J.Modal{releases;constructor(t){super(app),$e("davisriedel","obsidian-typewriter-mode",t).then(i=>{if(this.releases=i,this.releases.length===0){this.close();return}this.display()}).catch(i=>{console.log(`Failed to fetch release notes: ${i}`),this.close()})}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h1",{text:"Fetching release notes..."})}onClose(){let{contentEl:t}=this;t.empty()}display(){let{contentEl:t}=this;t.empty(),t.classList.add("ptm-update-modal-container");let i=t.createDiv("ptm-update-modal"),r=this.releases.map(l=>`### ${l.tag_name}

${l.body}`).join(`
---
`),n=`# Typewriter Mode updated to v${this.releases[0].tag_name}

**Thank you for using Typewriter Mode!** If you like the plugin, please consider supporting me on [GitHub Sponsors](https://github.com/sponsors/davisriedel). Your Sponsorship will allow me to invest more time in the development and maintenance of the plugin.

If you find any bugs or have a feature request, please feel free to [open an issue on GitHub](https://github.com/davisriedel/obsidian-typewriter-mode/issues).

## What's new?

Here's what's new since the last version you had installed:

---

${r}`;J.MarkdownRenderer.renderMarkdown(n,i,app.vault.getRoot().path,new fe.Component)}};var c=class{constructor(t){this.plugin=t}load(){}};var g=class extends c{registerCommand(){this.plugin.addCommand({id:this.commandKey,name:this.commandTitle,callback:this.onCommand.bind(this)})}load(){this.registerCommand()}};var Q=class extends g{commandKey="fullscreen-writing-focus";commandTitle="Toggle fullscreen writing focus";onCommand(){let i=this.plugin.app.workspace.activeLeaf.view;i.getViewType()!=="empty"&&(document.fullscreenElement?this.exitFullscreenWritingFocus():this.startFullscreenWritingFocus(i),i.containerEl.onfullscreenchange=()=>{document.fullscreenElement||this.onExitFullscreenWritingFocus()})}startFullscreenWritingFocus(t){let i=this.plugin.settings.doesFullscreenWritingFocusShowHeader?t.containerEl:t.contentEl;i.requestFullscreen().then(()=>{i.classList.add("ptm-fullscreen-writing-focus-element"),i.setAttr("data-ptm-fullscreen-writing-focus-vignette-style",this.plugin.settings.fullscreenWritingFocusVignetteStyle)})}exitFullscreenWritingFocus(){document.exitFullscreen().then()}onExitFullscreenWritingFocus(){let t=document.getElementsByClassName("ptm-fullscreen-writing-focus-element");!t||t.length===0||(t[0].removeAttribute("data-ptm-fullscreen-writing-focus-vignette-style"),t[0].classList.remove("ptm-fullscreen-writing-focus-element"))}};function we(e){return e.charAt(0).toUpperCase()+e.slice(1)}var X=class extends c{load(){for(let t of["up","down"])this.plugin.addCommand({id:`move-typewriter-${t}`,name:`Move typewriter ${t}`,hotkeys:[{modifiers:["Mod"],key:t==="up"?"ArrowUp":"ArrowDown"}],editorCallback:(i,r)=>this.onCommand(i,t)})}onCommand(t,i){t.exec(`go${we(i)}`),window.dispatchEvent(new Event("moveByCommand"))}};var Z=class extends g{commandKey="typewriter-scrolling-and-paragraph-dimming";commandTitle="Toggle typewriter scrolling and paragraph dimming";onCommand(){let{isTypewriterScrollEnabled:t,isDimUnfocusedParagraphsEnabled:i}=this.plugin.settings,r=t&&i;this.plugin.features.TypewriterScroll.toggle(!r),this.plugin.features.DimUnfocusedParagraphs.toggle(!r)}};var ee=class extends g{commandKey="toggle-paragraph-dimming";commandTitle="Toggle paragraph dimming on/off";onCommand(){let{isDimUnfocusedParagraphsEnabled:t}=this.plugin.settings;this.plugin.features.DimUnfocusedParagraphs.toggle(!t)}};var te=class extends g{commandKey="toggle-typewriter";commandTitle="Toggle typewriter scrolling on/off";onCommand(){let{isTypewriterScrollEnabled:t}=this.plugin.settings;this.plugin.features.TypewriterScroll.toggle(!t)}};function ye(e){return{ToggleTypewriter:new te(e),ToggleDimming:new ee(e),ToggleTypewriterAndDimming:new Z(e),MoveTypewriter:new X(e),FullscreenWritingFocus:new Q(e)}}var o=class extends c{enable(){}disable(){}isSettingEnabled(){return this.plugin.settings.isPluginActivated}};var be=require("obsidian"),h=class extends o{setting;themeMode;constructor(t,i){super(t),this.themeMode=i,this.setting=`currentLineHighlightColor-${i}`}registerSetting(t){new be.Setting(t.containerEl).setName(`Current line highlight color in ${this.themeMode} themes`).setDesc(`The color of the current line highlight in ${this.themeMode} themes`).setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings[this.setting]).onChange(r=>{this.changeCurrentLineHighlightColor(r)})).setDisabled(!this.isSettingEnabled())}load(){this.plugin.setCSSVariable(`--current-line-highlight-color-${this.themeMode}`,`${this.plugin.settings[this.setting]}`)}changeCurrentLineHighlightColor(t){this.plugin.settings[this.setting]=t,this.plugin.setCSSVariable(`--current-line-highlight-color-${this.themeMode}`,`${t}`),this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isHighlightCurrentLineEnabled}};var y=class extends h{constructor(t){super(t,"dark")}};var b=class extends h{constructor(t){super(t,"light")}};var ve=require("obsidian"),v=class extends o{setting="currentLineHighlightStyle";registerSetting(t){new ve.Setting(t.containerEl).setName("Current line highlight style").setDesc("The style of the current line highlight").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("box","Box").addOption("underline","Underline").setValue(this.plugin.settings.currentLineHighlightStyle).onChange(r=>{this.changeCurrentLineHighlightStyle(r),t.display()})).setDisabled(!this.isSettingEnabled())}changeCurrentLineHighlightStyle(t){this.plugin.settings.currentLineHighlightStyle=t,this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isHighlightCurrentLineEnabled}};var Te=require("obsidian"),T=class extends o{setting="currentLineHighlightUnderlineThickness";registerSetting(t){new Te.Setting(t.containerEl).setName("Current line underline thickness").setDesc("The thickness of the underline that highlights the current line").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(1,5,1).setDynamicTooltip().setValue(this.plugin.settings.currentLineHighlightUnderlineThickness).onChange(r=>{this.changeCurrentLineHighlightUnderlineThickness(r)})).setDisabled(!this.isSettingEnabled())}load(){this.plugin.setCSSVariable("--current-line-highlight-underline-thickness",`${this.plugin.settings.currentLineHighlightUnderlineThickness}px`)}changeCurrentLineHighlightUnderlineThickness(t){this.plugin.settings.currentLineHighlightUnderlineThickness=t,this.plugin.setCSSVariable("--current-line-highlight-underline-thickness",`${t}px`),this.plugin.saveSettings()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isHighlightCurrentLineEnabled}};var Se=require("obsidian"),S=class extends o{setting="dimUnfocusedEditorsBehavior";registerSetting(t){new Se.Setting(t.containerEl).setName("Paragraph dimming behavior in unfocused notes").setDesc("How to dim paragraphs in notes / editors that your cursor is not on (e.g. if you have multiple notes open in split panes)").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("dim-none","Do not dim any paragraph").addOption("dim","Dim all but the previously focused paragraph").addOption("dim-all","Dim all paragraphs").setValue(this.plugin.settings.dimUnfocusedEditorsBehavior).onChange(r=>{this.changeDimUnfocusedEditorsBehavior(r),t.display()})).setDisabled(!this.isSettingEnabled())}load(){super.load(),this.plugin.perWindowProps.bodyAttrs["data-ptm-dim-unfocused-editors-behavior"]=this.plugin.settings.dimUnfocusedEditorsBehavior}changeDimUnfocusedEditorsBehavior(t){this.plugin.settings.dimUnfocusedEditorsBehavior=t,this.plugin.perWindowProps.bodyAttrs["data-ptm-dim-unfocused-editors-behavior"]=t,this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var Ee=require("obsidian"),s=class extends o{toggleClass=null;commandTitle;registerCommand(){this.hasCommand&&this.plugin.addCommand({id:this.setting,name:this.commandTitle,callback:this.toggle.bind(this)})}registerSetting(t){new Ee.Setting(t.containerEl).setName(this.settingTitle).setDesc(this.settingDesc).setClass("typewriter-mode-setting").addToggle(i=>i.setValue(this.plugin.settings[this.setting]).onChange(r=>{this.toggle(r),t.display()})).setDisabled(!this.isSettingEnabled())}load(){this.registerCommand(),this.plugin.settings[this.setting]?this.enable():this.disable()}toggle(t=null){let i=t;i===null&&(i=!this.plugin.settings[this.setting]),this.plugin.settings={...this.plugin.settings,[this.setting]:i},i?this.enable():this.disable(),this.plugin.saveSettings().then()}enable(){this.toggleClass&&(this.plugin.perWindowProps.bodyClasses.contains(this.toggleClass)||this.plugin.perWindowProps.bodyClasses.push(this.toggleClass))}disable(){this.toggleClass&&this.plugin.perWindowProps.bodyClasses.indexOf(this.toggleClass)&&this.plugin.perWindowProps.bodyClasses.remove(this.toggleClass)}};var E=class extends s{setting="isDimUnfocusedParagraphsEnabled";toggleClass="ptm-dim-unfocused-paragraphs";hasCommand=!0;commandTitle="Toggle dimming unfocused paragraphs";settingTitle="Dim unfocused paragraphs";settingDesc="Darkens unfocused paragraphs in the editor"};var Ce=require("obsidian"),C=class extends o{setting="dimmedParagraphsOpacity";registerSetting(t){new Ce.Setting(t.containerEl).setName("Opacity of dimmed paragraphs").setDesc("The opacity of dimmed paragraphs").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(0,100,5).setDynamicTooltip().setValue(this.plugin.settings.dimmedParagraphsOpacity*100).onChange(r=>{this.changeDimmedParagraphsOpacity(r/100)})).setDisabled(!this.isSettingEnabled())}load(){this.plugin.setCSSVariable("--dimmed-paragraphs-opacity",`${this.plugin.settings.dimmedParagraphsOpacity}`)}changeDimmedParagraphsOpacity(t=.25){this.plugin.settings.dimmedParagraphsOpacity=t,this.plugin.setCSSVariable("--dimmed-paragraphs-opacity",`${t}`),this.plugin.saveSettings()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var M=class extends s{setting="doesFullscreenWritingFocusShowHeader";toggleClass="ptm-fullscreen-writing-focus-show-header";hasCommand=!1;settingTitle="Show header in fullscreen writing focus";settingDesc="If enabled, the header will be shown in fullscreen writing focus"};var x=class extends s{setting="doesFullscreenWritingFocusShowVignette";toggleClass="ptm-fullscreen-writing-focus-vignette";hasCommand=!1;settingTitle="Fullscreen writing focus vignette";settingDesc="Add a vignette to the edges of the screen in fullscreen writing focus"};var Me=require("obsidian"),P=class extends o{setting="fullscreenWritingFocusVignetteStyle";registerSetting(t){new Me.Setting(t.containerEl).setName("Fullscreen writing focus vignette style").setDesc("The style of the vignette in fullscreen writing focus mode").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("box","Box").addOption("column","Column").setValue(this.plugin.settings.fullscreenWritingFocusVignetteStyle).onChange(r=>{this.changeVignetteStyle(r),t.display()})).setDisabled(!this.isSettingEnabled())}changeVignetteStyle(t){this.plugin.settings.fullscreenWritingFocusVignetteStyle=t,this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.doesFullscreenWritingFocusShowVignette}};var D=class extends s{setting="isHighlightCurrentLineEnabled";toggleClass="ptm-highlight-current-line";hasCommand=!0;commandTitle="Toggle highlight current line";settingTitle="Highlight current line";settingDesc="Highlights the line that the cursor is currently on"};var L=class extends s{setting="isHighlightCurrentLineOnlyInFocusedEditorEnabled";toggleClass="ptm-highlight-current-line-only-in-active-editor";hasCommand=!1;settingTitle="Highlight current line only in focused note";settingDesc="Only show highlighted line in the note your cursor is on (e.g. if you have multiple notes open in split panes)";isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isHighlightCurrentLineEnabled}};var A=class extends s{setting="isKeepLinesAboveAndBelowEnabled";hasCommand=!0;commandTitle="Toggle keeping lines above and below";settingTitle="Keep lines above and below";settingDesc="When enabled, always keeps the specified amount of lines above and below the current line in view";isSettingEnabled(){return super.isSettingEnabled()&&!this.plugin.settings.isTypewriterScrollEnabled}};var F=class extends s{setting="isMaxCharsPerLineEnabled";toggleClass="ptm-max-chars-per-line";hasCommand=!0;commandTitle="Toggle maximum number of characters per line";settingTitle="Limit maximum number of characters per line";settingDesc="Limits the maximum number of characters per line"};var xe=require("obsidian"),U=class extends o{setting="linesAboveAndBelow";registerSetting(t){new xe.Setting(t.containerEl).setName("Amount of lines above and below the current line").setDesc("The amount of lines to always keep above and below the current line").setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings.linesAboveAndBelow.toString()).onChange(r=>{this.changeAmountOfLinesAboveAndBelow(parseInt(r))})).setDisabled(!this.isSettingEnabled())}changeAmountOfLinesAboveAndBelow(t){this.plugin.settings.linesAboveAndBelow=t,this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isTypewriterScrollEnabled&&this.plugin.settings.isKeepLinesAboveAndBelowEnabled}};var Pe=require("obsidian"),O=class extends o{setting="maxCharsPerLine";registerSetting(t){new Pe.Setting(t.containerEl).setName("Maximum number of characters per line").setDesc("The maximum number of characters per line").setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings.maxCharsPerLine.toString()).onChange(r=>{this.changeMaxCharsPerLine(parseInt(r))})).setDisabled(!this.isSettingEnabled())}load(){this.plugin.setCSSVariable("--max-chars-per-line",`${this.plugin.settings.maxCharsPerLine}ch`)}changeMaxCharsPerLine(t){this.plugin.settings.maxCharsPerLine=t,this.plugin.setCSSVariable("--max-chars-per-line",`${t}ch`),this.plugin.saveSettings()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isMaxCharsPerLineEnabled}};var H=class extends s{setting="isOnlyActivateAfterFirstInteractionEnabled";hasCommand=!1;settingTitle="Only activate after first interaction";settingDesc="Activate the focused line highlight and paragraph dimming only after the first interaction with the editor"};var k=class extends s{setting="isOnlyMaintainTypewriterOffsetWhenReachedEnabled";hasCommand=!1;settingTitle="Only maintain typewriter offset when reached";settingDesc="The line that the cursor is on will not be scrolled to the center of the editor until it the specified typewriter offset is reached. This removes the additional space at the top of the editor.";isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isTypewriterScrollEnabled}};var V=class extends s{setting="isPauseDimUnfocusedParagraphsWhileScrollingEnabled";toggleClass="ptm-dim-unfocused-paragraphs-pause-while-scrolling";hasCommand=!1;settingTitle="Pause dimming unfocused paragraphs while scrolling";settingDesc="If this is enabled, paragraphs are not dimmed while scrolling";isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var W=class extends s{setting="isPauseDimUnfocusedParagraphsWhileSelectingEnabled";toggleClass="ptm-dim-unfocused-paragraphs-pause-while-selecting";hasCommand=!1;settingTitle="Pause dimming unfocused paragraphs while selecting text";settingDesc="If this is enabled, paragraphs are not dimmed while selecting text";isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var De=require("obsidian"),I=class extends o{setting="typewriterOffset";registerSetting(t){new De.Setting(t.containerEl).setName("Typewriter offset").setDesc("Positions the typewriter line at the specified percentage of the screen").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(0,100,5).setDynamicTooltip().setValue(this.plugin.settings.typewriterOffset*100).onChange(r=>{this.changeTypewriterOffset(r/100)})).setDisabled(!this.isSettingEnabled())}changeTypewriterOffset(t){this.plugin.settings.typewriterOffset=t,this.plugin.saveSettings().then()}isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isTypewriterScrollEnabled}};var B=class extends s{setting="isTypewriterOnlyUseCommandsEnabled";toggleClass="ptm-typewriter-only-use-commands";hasCommand=!1;settingTitle="Do not snap typewriter with arrow keys";settingDesc="The typewriter will only snap when using this plugin's move commands. It will not snap when using the arrow keys. The move commands are by default Cmd/Ctrl+ArrowUp/ArrowDown, but you can assign your own hotkeys for the move commands in Obsidian's settings.";isSettingEnabled(){return super.isSettingEnabled()&&this.plugin.settings.isTypewriterScrollEnabled}};var R=class extends s{setting="isTypewriterScrollEnabled";toggleClass="ptm-typewriter-scroll";hasCommand=!0;commandTitle="Toggle typewriter scrolling";settingTitle="Typewriter scrolling";settingDesc="Turns typewriter scrolling on or off";isSettingEnabled(){return super.isSettingEnabled()&&!this.plugin.settings.isKeepLinesAboveAndBelowEnabled}};var $=class extends s{setting="isAnnounceUpdatesEnabled";toggleClass="ptm-announce-updates";hasCommand=!1;settingTitle="Announce updates";settingDesc="If enabled you will get a notice with release notes whenever you install a new version of Typewriter Mode"};var z=class extends s{setting="isDisableInCanvasEnabled";toggleClass="ptm-is-disabled-in-canvas";hasCommand=!1;settingTitle="Disable the plugin in canvas";settingDesc="This will disable the plugin completely in canvas"};var N=class extends s{setting="isPluginActivated";toggleClass="ptm-plugin-activated";hasCommand=!0;commandTitle="Toggle Typewriter Mode Plugin On / Off";settingTitle="Activate Typewriter Mode Plugin";settingDesc="This enables or disables all features of the plugin.";isSettingEnabled(){return!0}};function Le(e){return{TogglePluginActivation:new N(e),DisableInCanvas:new z(e),TypewriterScroll:new R(e),TypewriterOffset:new I(e),OnlyMaintainTypewriterOffsetWhenReached:new k(e),TypewriterOnlyUseCommands:new B(e),KeepLinesAboveAndBelow:new A(e),LinesAboveAndBelow:new U(e),HighlightCurrentLine:new D(e),CurrentLineHighlightColorLight:new b(e),CurrentLineHighlightColorDark:new y(e),CurrentLineHighlightStyle:new v(e),CurrentLineHighlightUnderlineThickness:new T(e),HighlightCurrentLineOnlyInFocusedEditor:new L(e),DimUnfocusedParagraphs:new E(e),DimmedParagraphsOpacity:new C(e),PauseDimUnfocusedParagraphsWhileScrolling:new V(e),PauseDimUnfocusedParagraphsWhileSelecting:new W(e),DimUnfocusedEditorsBehavior:new S(e),OnlyActivateAfterFirstInteraction:new H(e),LimitMaxCharsPerLine:new F(e),MaxCharsPerLine:new O(e),FullscreenWritingFocusShowsHeader:new M(e),FullscreenWritingFocusVignette:new x(e),FullscreenWritingFocusVignetteStyle:new P(e),AnnounceUpdates:new $(e)}}var K=class extends Ae.Plugin{settings;perWindowProps={cssVariables:{},bodyClasses:[],bodyAttrs:{}};editorExtensions=[ue,[]];features=Le(this);commands=ye(this);async onload(){let t=await this.loadData();this.settings=Object.assign(q,t);for(let i of Object.values(this.features))i.load();for(let i of Object.values(this.commands))i.load();this.addSettingTab(new u(this.app,this)),this.updateFacets(),this.registerEditorExtension(this.editorExtensions),this.announceUpdate()}onunload(){for(let t of Object.values(this.features))t.disable()}updateFacets(){console.log("updateFacets"),this.editorExtensions[1]=[a.of(this.settings),_.of(this.perWindowProps)]}async saveSettings(){await this.saveData(this.settings),this.updateFacets(),this.app.workspace.updateOptions()}setCSSVariable(t,i){this.perWindowProps.cssVariables[t]=i}announceUpdate(){let t=this.manifest.version,i=this.settings.version;if(t===i||(this.settings.version=t,this.saveSettings().then(),this.settings.isAnnounceUpdatesEnabled===!1))return;new Y(i).open()}};var ze=K;
